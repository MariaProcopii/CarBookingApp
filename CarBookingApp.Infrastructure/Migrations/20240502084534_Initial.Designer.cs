// <auto-generated />
using System;
using CarBookingApp.Infrastructure.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarBookingApp.Infrastructure.Migrations
{
    [DbContext(typeof(CarBookingAppDbContext))]
    [Migration("20240502084534_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("EntitySequence");

            modelBuilder.Entity("CarBookingApp.Domain.Model.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"EntitySequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.PassengerRide", b =>
                {
                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<int>("RideId")
                        .HasColumnType("integer");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.Property<int>("PassengersId")
                        .HasColumnType("integer");

                    b.Property<string>("RideStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("UPCOMING");

                    b.HasKey("PassengerId", "RideId");

                    b.HasIndex("PassengersId");

                    b.HasIndex("RideId");

                    b.ToTable("PassengerRide");
                });

            modelBuilder.Entity("FacilityRideDetail", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .HasColumnType("integer");

                    b.Property<int>("RideDetailId")
                        .HasColumnType("integer");

                    b.HasKey("FacilitiesId", "RideDetailId");

                    b.HasIndex("RideDetailId");

                    b.ToTable("FacilityRideDetail");
                });

            modelBuilder.Entity("UserVehicle", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VehiclesId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "VehiclesId");

                    b.HasIndex("VehiclesId");

                    b.ToTable("UserVehicle");
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.Destination", b =>
                {
                    b.HasBaseType("CarBookingApp.Domain.Model.Entity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.Facility", b =>
                {
                    b.HasBaseType("CarBookingApp.Domain.Model.Entity");

                    b.Property<string>("FacilityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.Ride", b =>
                {
                    b.HasBaseType("CarBookingApp.Domain.Model.Entity");

                    b.Property<int>("AvailableSeats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("available_seats");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateOfTheRide")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DestinationFromId")
                        .HasColumnType("integer");

                    b.Property<int>("DestinationToId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasIndex("DestinationFromId");

                    b.HasIndex("DestinationToId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Rides", null, t =>
                        {
                            t.HasCheckConstraint("CK_Ride_AvailableSeats", "available_seats >= 1 AND available_seats <= 6");
                        });
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.RideDetail", b =>
                {
                    b.HasBaseType("CarBookingApp.Domain.Model.Entity");

                    b.Property<string>("PickUpSpot")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("price");

                    b.Property<int>("RideId")
                        .HasColumnType("integer");

                    b.HasIndex("RideId")
                        .IsUnique();

                    b.ToTable("RideDetails", null, t =>
                        {
                            t.HasCheckConstraint("CK_RideDetail_Price_GreaterThanZero", "price >= 0");
                        });
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.RideReview", b =>
                {
                    b.HasBaseType("CarBookingApp.Domain.Model.Entity");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<string>("ReviewComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RevieweeId")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("integer");

                    b.HasIndex("RevieweeId")
                        .IsUnique();

                    b.HasIndex("ReviewerId")
                        .IsUnique();

                    b.ToTable("RideReviews", null, t =>
                        {
                            t.HasCheckConstraint("CK_RideReviews_Rating", "rating >= 0");
                        });
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.User", b =>
                {
                    b.HasBaseType("CarBookingApp.Domain.Model.Entity");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_User_Age_Adult", "age >= 18");
                        });
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.Vehicle", b =>
                {
                    b.HasBaseType("CarBookingApp.Domain.Model.Entity");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.PassengerRide", b =>
                {
                    b.HasOne("CarBookingApp.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("PassengersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBookingApp.Domain.Model.Ride", null)
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacilityRideDetail", b =>
                {
                    b.HasOne("CarBookingApp.Domain.Model.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBookingApp.Domain.Model.RideDetail", null)
                        .WithMany()
                        .HasForeignKey("RideDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserVehicle", b =>
                {
                    b.HasOne("CarBookingApp.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBookingApp.Domain.Model.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.Ride", b =>
                {
                    b.HasOne("CarBookingApp.Domain.Model.Destination", "DestinationFrom")
                        .WithMany()
                        .HasForeignKey("DestinationFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarBookingApp.Domain.Model.Destination", "DestinationTo")
                        .WithMany()
                        .HasForeignKey("DestinationToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarBookingApp.Domain.Model.User", "Owner")
                        .WithMany("CreatedRides")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationFrom");

                    b.Navigation("DestinationTo");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.RideDetail", b =>
                {
                    b.HasOne("CarBookingApp.Domain.Model.Ride", "Ride")
                        .WithOne("RideDetail")
                        .HasForeignKey("CarBookingApp.Domain.Model.RideDetail", "RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.RideReview", b =>
                {
                    b.HasOne("CarBookingApp.Domain.Model.User", "Reviewee")
                        .WithOne()
                        .HasForeignKey("CarBookingApp.Domain.Model.RideReview", "RevieweeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBookingApp.Domain.Model.User", "Reviewer")
                        .WithOne()
                        .HasForeignKey("CarBookingApp.Domain.Model.RideReview", "ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.Ride", b =>
                {
                    b.Navigation("RideDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("CarBookingApp.Domain.Model.User", b =>
                {
                    b.Navigation("CreatedRides");
                });
#pragma warning restore 612, 618
        }
    }
}
